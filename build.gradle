plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Environment
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail' // Spring Mail 라이브러리 추가
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'javax.servlet:jstl:1.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter' //추가
    implementation 'org.springframework.boot:spring-boot-starter-mail' //추가
    testImplementation 'org.springframework.boot:spring-boot-starter-test' //추가

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Csv parsing
    implementation 'com.opencsv:opencsv:5.3'

    // postgreSQL
    implementation 'org.postgresql:postgresql'

    // Web socket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.apache.httpcomponents:httpclient'

    // Google Cloud Storage
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter', version: '1.2.5.RELEASE'

    //sse
    implementation 'io.projectreactor:reactor-core:3.4.11'

    // Etc
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "C:/Program Files/nodejs/npm.cmd", "audit", "fix"
        commandLine 'C:/Program Files/nodejs/npm.cmd', 'install'
    } else {
        commandLine "/usr/local/bin/npm", "audit", "fix"
        commandLine '/usr/local/bin/npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "C:/Program Files/nodejs/npm.cmd", "run-script", "build"
    } else {
        commandLine "/usr/local/bin/npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}

build {
    dependsOn copyReactBuildFiles
}